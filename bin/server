#!/usr/bin/env node

/**
 * Start express and others
 * Transpile tsc from VS Code or http://adminhacks.com/typescript-compile.html
 */

const app = require('../express/app'),
    https = require('https'),
    http = require('http'),
    fs = require('fs'),
    debuger = require('debug');

const debug = debuger('chatbot:server'),
    config = require('config');

require('../bot'); //Now start bot


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || config.sslPort),
    httpPort = normalizePort(config.sslPort || 3000);

//app.set('port', port);

/**
 * Create HTTP server.
 */

const server = https.createServer({
    key: fs.readFileSync('ssl/key.pem'), //site certificate
    cert: fs.readFileSync('ssl/cert.pem')
}, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create plain HTTP server for testing
 */
const HTTPServer = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */
HTTPServer.listen(httpPort);
HTTPServer.on('error', onError);
HTTPServer.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}